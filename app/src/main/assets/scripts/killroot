#!/system/bin/sh

shels=$(readlink -f $0)
. ${shels%/*}/bootroot_env

isAllunmounted=0

#######################
#### DEFINE FUNCTIONS ####
#######################

# Kill all chroot processes
kill_processes() {
    echo "[!] Killing all running processes..."
    local lsof_full=$($BUSYBOX lsof | awk '{print $1}' | grep -c '^lsof')
    if [ "${lsof_full}" -eq 0 ]; then
        local pids=$($BUSYBOX lsof | grep "$MNT" | awk '{print $1}' | uniq)
    else
        local pids=$($BUSYBOX lsof | grep "$MNT" | awk '{print $2}' | uniq)
    fi
    if [ -n "${pids}" ]; then
        kill -9 ${pids} 2> /dev/null
        return $?
    fi

    echo "[!] Removing all the remaining chroot VNC sessions pid and log files..."
    rm -rf $MNT/tmp/.X11* $MNT/tmp/.X*-lock $MNT/root/.vnc/*.pid $MNT/root/.vnc/*.log > /dev/null 2>&1

    return 0
}

# Restoring the device to its original state
restore_state() {
    echo "[!] Restoring the device to its original state..."

    # Restore shared memory
    $BUSYBOX sysctl -w kernel.shmmax=134217728

    # i
}

# Unbinding filesystem
do_unmount() {
    sync
    kill_processes
    restore_state

    echo "[!] Removing all fs mounts..."

    # Safely try to unmount internal storage partition
    $BUSYBOX umount -l $MNT/sdcard
    echo "[+] Internal storage partition is unmounted."
    if [ ! "$($BUSYBOX mountpoint $MNT/sdcard 2> /dev/null | grep 'is a')" ]; then
        echo "[+] Internal storage partition isn't a mountpoint now, everything fine."
    fi

    FS=(dev/pts dev/shm dev proc sys system)
    for i in "${FS[@]}"; do
        if $BUSYBOX mountpoint -q $MNT/$i; then
            if $BUSYBOX umount -l "$MNT/$i" || $BUSYBOX umount -f "$MNT/$i"; then
                echo "[+] /$i partition is unmounted."
                if [ ! "$i" = "dev/pts" -a ! "$i" = "dev/shm" ]; then
                    if rm -rf $MNT/$i; then
                        echo "[+] $MNT/$i is removed."
                    else
                        echo "[-] Failed to remove $MNT/$i"
                        isAllunmounted=1
                    fi
                fi
            else
                echo "[-] Failed to unmount $i partition."
                isAllunmounted=1
            fi
        else
            if [ -d $MNT/$i ]; then
                echo "[+] /$i partition is unmounted already."
                if rm -rf $MNT/$i; then
                    echo "[+] $MNT/$i is removed."
                else
                    echo "[-] Failed to remove $MNT/$i"
                    isAllunmounted=1
                fi
            fi
        fi
    done
}

# Check chroot is mountpoint
check_chroot() {
    if [ -d "$MNT" ]; then
        $BUSYBOX mountpoint -q "$MNT" && return 0
        return 1
    fi
}

################################
########### MAIN PART ##########
################################

check_chroot
res=$?
case $res in
1)
    echo "[!] Unmounting chroot now..."
    do_unmount
    ;;
*)
    echo "[!] Something wrong, aborted."
    exit 1
esac

if [ -z "$(cat /proc/mounts | grep $MNT)" ]; then
    echo "[+] Chroot unmounted successfully."
    isAllunmounted=0
else
    echo "[-] There are still mounted points not unmounted yet."
    echo "[-] Try run this script again and see if they can be unmounted now."
    isAllunmounted=1
fi

return $isAllunmounted