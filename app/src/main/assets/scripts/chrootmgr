#!/system/bin/sh
###
shels=$(readlink -f $0)
. ${shels%/*}/bootroot_env
###

#################################
#### DEFINE GLOBAL VARIABLES ####
#################################

## unset the $MNT variables first.
# unset MNT

## Define the fixed nhsystem path
[ ! -d $NHSYSTEM_PATH ] && mkdir -p $NHSYSTEM_PATH

## Validate busybox path.
if [ -z "$BUSYBOX" ]; then
    echo "[-] Busybox isn't installed or permissions isn't granted to execute it."
    echo "Check has been made for:"
    echo "1. /system/xbin"
    echo "2. /system/bin"
    exit 1
fi

##########################
#### DEFINE FUNCTIONS ####
##########################

f_chroot_usage(){
    echo "[!] Usage:"
    echo "[!] chrootmgr [-p <your chroot folder>] -c \"getchtpath\" ---> return the string of current chroot container path."
    echo "[!] chrootmgr [-p <your chroot folder>] -c \"status\" ---> return 0 if chroot is mounted, return 1 if choot is not yet mounted, return 2 if no chroot is found."
    echo "[!] chrootmgr [-p <your chroot folder>] -c \"backup <full_path_of_your_chroot_folder> <full_path_with_desired_name.tar.[gx]z>\""
    echo "[!] chrootmgr [-p <your chroot folder>] -c \"restore <full_path_of_your_.tar.[gx]z> </data/local/nhsystem/>\""
    echo "[!] chrootmgr [-p <your chroot folder>] -c \"remove <full_path_of_your_chroot_folder>\" ---> Delete your chroot folder without rebooting the device, but not 100% guranteed success"
    echo "[!] If -p option is not specified, then the script will find the chroot path according to the app sharepreference."
}

## No use for now.
f_mountfs(){
    export bin=/system/bin
    export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH
    export TERM=linux
    export HOME=/root
    export USER=root
    export LOGNAME=root
    unset LD_PRELOAD
    if [ ! -e "/dev/fd" -o ! -e "/dev/stdin" -o ! -e "/dev/stdout" -o ! -e "/dev/stderr" ]; then
        [ -e "/dev/fd" ] || ln -s /proc/self/fd /dev/ && echo "[+] linked /proc/self/fd to /dev/"
        [ -e "/dev/stdin" ] || ln -s /proc/self/fd/0 /dev/stdin && echo "[+] linked /proc/self/fd/0 to /dev/stdin"
        [ -e "/dev/stdout" ] || ln -s /proc/self/fd/1 /dev/stdout && echo "[+] linked /proc/self/fd/1 to /dev/stdout"
        [ -e "/dev/stderr" ] || ln -s /proc/self/fd/2 /dev/stderr && echo "[+] linked /proc/self/fd/2 to /dev/stderr"
    fi

    ######### SET TUN ########
    if [ ! -e "/dev/net/tun" ]; then
        [ ! -d "/dev/net" ] && mkdir -p /dev/net
        $BUSYBOX mknod /dev/net/tun c 10 200 && echo "[+] created /dev/net/tun"
    fi

    ######### SET DEV ########
    if [ ! "$($BUSYBOX mountpoint $MNT/dev 2> /dev/null | grep 'is a')" ]; then
        [ -d $MNT/dev ] && rm -rf $MNT/dev
        [ ! -d $MNT/dev ] && mkdir -p $MNT/dev
        $BUSYBOX mount -o bind /dev $MNT/dev && echo "[+] binded /dev"
    fi

    ######### SET DEV PTS ########
    if [ ! "$($BUSYBOX mountpoint $MNT/dev/pts 2> /dev/null | grep 'is a')" ]; then
        $BUSYBOX mount -t devpts devpts $MNT/dev/pts && echo "[+] mounted /dev/pts"
    fi

    ######### SET DEV SHM ########
    if [ ! "$($BUSYBOX mountpoint $MNT/dev/shm 2> /dev/null | grep 'is a')" ]; then
        [ ! -d $MNT/dev/shm ] && mkdir -p $MNT/dev/shm
        $BUSYBOX mount -o rw,nosuid,nodev,mode=1777 -t tmpfs tmpfs $MNT/dev/shm && echo "[+] mounted /dev/shm"
    fi

    ######### SET PROC ########
    if [ ! "$($BUSYBOX mountpoint $MNT/proc 2> /dev/null | grep 'is a')" ]; then
        [ -d $MNT/proc ] && rm -rf $MNT/proc
        [ ! -d $MNT/proc ] && mkdir -p $MNT/proc
        $BUSYBOX mount -t proc proc $MNT/proc && echo "[+] mounted /proc"
    fi

    ######### SET SYS ########
    if [ ! "$($BUSYBOX mountpoint $MNT/sys 2> /dev/null | grep 'is a')" ]; then
        [ -d $MNT/sys ] && rm -rf $MNT/sys
        [ ! -d $MNT/sys ] && mkdir -p $MNT/sys
        $BUSYBOX mount -t sysfs sys $MNT/sys && echo "[+] mounted /sys"
    fi

    ######### SET SYS ########
    if [ ! "$($BUSYBOX mountpoint $MNT/system 2> /dev/null | grep 'is a')" ]; then
        [ -d $MNT/system ] && rm -rf $MNT/system
        [ ! -d $MNT/system ] && mkdir -p $MNT/system
        $BUSYBOX mount -o bind /system $MNT/system && echo "[+] binded /system"
    fi
}

###################
#### MAIN PART ####
###################

while getopts "p:c:" OPTS; do
    case $OPTS in
        p) MNT=$OPTARG;;
        c) COMMAND=$OPTARG;;
        *) f_chroot_usage;exit 1;;
    esac
done

if [ -z "$COMMAND" ]; then
    f_chroot_usage
    exit 1
fi

if [ -z "$MNT" ]; then
    set -- ${COMMAND[@]}
    if [ -z "$MNT" -a ! "$COMMAND" = "findchroot"  ]; then
        echo "[-] The \$MNT variable isn't defined, please run the MaterialHunter app first."
        exit 2
    fi
else
    shift $((OPTIND-1))
    set -- ${COMMAND[@]}
fi

if [ ! $# -eq 0 ]; then
    case "$1" in
        getchtpath)
            shift 1
            case $# in
                0)
                    echo $MNT
                    ;;
                *)
                    f_chroot_usage
                    ;;
            esac
            ;;
        status)
            shift 1
            case $# in
                0)
                    echo "[!] Chroot path is set to -> $MNT"
                    if [ ! -d "$MNT" ]; then
                        echo "[-] \"$MNT\" chroot not exist!"
                        echo "[!] Click the button [Install] down below now!"
                        exit 2
                    fi

                    echo "[!] Verifying chroot environment..."
                    if [ "$($BUSYBOX chroot $MNT /bin/uname -n)" ]; then
                        echo "[+] Seems you have chroot installed already!"
                        if [ -x $MNT/usr/bin/sudo ]; then
                            CHROOT_EXEC=/usr/bin/sudo
                        else
                            echo "[-] Your chroot has no \"sudo\" installed."
                        fi
                        ISALLREADY=0
                        FS=(proc sys dev dev/pts $system_part $sdcard_part)
                        for i in "${FS[@]}"; do
                            if [ "$($BUSYBOX grep $MNT/$i /proc/mounts)" ]; then
                                echo "[+] $i was mounted already."
                                continue
                            else
                                echo "[-] $i is not yet mounted."
                                ISALLREADY=1
                            fi
                        done

                        if [ $ISALLREADY -eq 0 ]; then
                            echo "[+] Chroot environment has been set and started."
                            echo "[!] You may click [Stop] to shutdown the chroot environment."
                            return 0
                        else
                            echo "[!] You may click [Start] to start the chroot environment."
                            return 1
                        fi
                    else
                        echo "[-] Chroot corrupted. This is not a MaterialHunter problem!"
                        echo "[!] If the error occurs..."
                        echo "Solutions:"
                        echo "1. Check the permissions of the chroot directories"
                        echo "2. Try using busybox to login and see errors (busybox chroot $MNT /bin/uname)"
                        echo "3. Contact chroot builder"
                        return 3
                    fi
                    ;;
                *)
                    f_chroot_usage
                    ;;
            esac
            ;;
        backup)
            shift 1
            case $# in
                2)
                    if ! echo $2 | $BUSYBOX grep -q ".tar.[gx]z$"; then
                        echo "[-] Invalid filename, make sure it is followed by .tar.gz(xz)"
                        exit 1
                    fi
                    [ ! -d $1 ] && echo "[-] $1 not found, please check again." && exit 1;
                    TARGET_DIR=`echo "$1" | $BUSYBOX sed "s/\(\/\+\)$//g" | $BUSYBOX awk -F/ '{print $NF}'`
                    if chrootmgr -c "status"; then
                        echo "[!] Chroot is mounted! Running killroot to make sure no service or process is being run."
                        if ! killroot; then
                            echo "[-] Aborted! killroot failed to unmount or kill all the fs. Please check.."
                            exit 1
                        fi
                    else
                        echo "[!] Chroot is already unmounted."
                    fi
                    echo "[!] Creating chroot backup from \"$TARGET_DIR\" to \"$2\", please be patient until it is finished.."
                    cd $1/../ || exit
                    if echo $2 | $BUSYBOX grep -q ".tar.gz$"; then
                        $BUSYBOX tar czf $2 $TARGET_DIR
                        $BUSYBOX sync
                    else
                        echo "[!] You must use tar.gz compression."
                        echo "Do not use tar.xz, it is slow and takes up more space"
                        exit 1
                    fi
                    echo "[+] Done! Backup has been created at \"$2\"."
                    return 0
                    ;;
                *)
                    f_chroot_usage
                    ;;
            esac
            ;;
        restore)
            shift 1
            case $# in
                2)
                    TARGET_TARBALL_PATH=$1
                    TARGET_CHROOT_DIR_NAME=$2

                    echo "[!] Checking... Please stay on the screen until process completes."
                    if ! echo $TARGET_TARBALL_PATH | grep -q ".tar.[gx]z$"; then
                        echo "[-] Invalid filename, make sure it is followed by tar.gz or tar.xz"
                        exit 1
                    fi
                    [ ! -e $TARGET_TARBALL_PATH ] && echo "[-] $TARGET_TARBALL_PATH not found, please check again." && exit 1;
                    [ ! "$(echo $TARGET_CHROOT_DIR_NAME | $BUSYBOX grep -E '^/data/local/nhsystem/')" ] && echo "[-] The chroot folder must be extracted to /data/local/nhsystem/" && exit 1;
                    if [ -d $TARGET_CHROOT_DIR_NAME ]; then
                        if [ "$(ls -A $TARGET_CHROOT_DIR_NAME)" ]; then
                            echo "[-] $TARGET_CHROOT_DIR_NAME is not a empty directory, please either delete the whole folder or all the files in it first."
                            exit 1
                        fi
                        rmdir $TARGET_CHROOT_DIR_NAME
                    fi
                    while true; do
                        TEMP_EXTRACT_DIR="$TARGET_CHROOT_DIR_NAME$RANDOM$RANDOM"
                        if [ ! -d $TEMP_EXTRACT_DIR ]; then
                            if mkdir -p "$TEMP_EXTRACT_DIR"; then
                                break;
                            else
                                echo "[-] Something goes wrong!?"
                                exit 1
                            fi
                        fi
                    done
                    echo "[!] Chroot requires at least 8 Gb free sapce just to make sure it won't break your system."
                    echo "[!] Checking storage capacity..."
                    SDCARD_PARTITION=$(mount | grep sdcardfs | $BUSYBOX awk '{print $1}' | head -n1)
                    AVAILABLESIZE=$(df $SDCARD_PARTITION | tail -n1 | $BUSYBOX awk '{s=$4} END{print (s/1024)}' | sed 's/\..*$//')
                    echo "[!] Available size of $SDCARD_PARTITION partition: $AVAILABLESIZE MB"
                    if [ ! $AVAILABLESIZE -gt 0 ]; then
                        echo "[-] Error checking space. Continuing to damage the device!"
                        exit 1
                    fi
                    echo "[!] Restoring the chroot backup from \"$TARGET_TARBALL_PATH\" to \"$TARGET_CHROOT_DIR_NAME\""
                    echo "[!] It may take a while, please be patient until it is finished extracting..."

                    if echo $TARGET_TARBALL_PATH | $BUSYBOX grep -q ".tar.[gx]z$"; then
                        TARBALL_ROOTDIR_NAME=$($BUSYBOX tar -tf $TARGET_TARBALL_PATH | $BUSYBOX sed -e 's@/.*@@' | $BUSYBOX uniq | $BUSYBOX sed 's/\/.*$//')
                        if [ $(echo $TARBALL_ROOTDIR_NAME | $BUSYBOX sed 's/ /\n/g' | wc -l) -eq 1 ]; then
                            $BUSYBOX tar xf $TARGET_TARBALL_PATH -C `echo "$TEMP_EXTRACT_DIR" | $BUSYBOX sed "s/\(\/\+\)$//g"`/ --exclude `echo "$TARBALL_ROOTDIR_NAME/dev"`
                            $BUSYBOX sync
                        else
                            echo "[-] $TARGET_TARBALL_PATH is not a valid tarball file for chroot, make sure there is only one root directory at the top level of the tarball file."
                        fi
                    fi
                    mv "$TEMP_EXTRACT_DIR/$TARBALL_ROOTDIR_NAME" "$TARGET_CHROOT_DIR_NAME"
                    rmdir "$TEMP_EXTRACT_DIR"
                    echo "[+] Chroot has been installed."
                    return 0
                    ;;
                *)
                    f_chroot_usage
                    ;;
            esac
            ;;
        remove)
            shift 1
            case $# in
                1)
                    [ ! -d $MNT ] && echo "[-] \"$MNT\" directory not existed! Please check again first!" && exit 1
                    $SOURCE_PATH/killroot
                    [ $? -eq 1 ] && echo "[-] Failed to umount the chroot environment..Aborted." && exit 1
                    [ ! -z `ls $MNT/sdcard` ] && echo "[-] /sdcard isn't unmounted, logic error" && exit 1
                    echo "[!] Removing $MNT now..."
                    echo "It may take a while, be patient."
                    rm -rf $MNT
                    $BUSYBOX sync
                    echo "[+] Chroot $MNT has been removed successfully."
                    ;;
                *)
                    f_chroot_usage
                    ;;
            esac
            ;;
        findchroot)
            shift 1
            case $# in
                0)
                    CHROOT_ARCH=($($BUSYBOX find $NHSYSTEM_PATH -type d -maxdepth 1 -exec $BUSYBOX basename {} \; | $BUSYBOX grep -E '^[^nhsystem]'))
                    if [ $(echo ${#CHROOT_ARCH[@]}) -eq 1 ]; then
                        if [ "$($BUSYBOX chroot $NHSYSTEM_PATH/$CHROOT_ARCH /bin/uname -n)" ]; then
                            echo $CHROOT_ARCH
                        fi
                    elif [ $(echo ${#CHROOT_ARCH[@]}) -gt 1 ]; then
                        for CHROOT_COUNT in $(seq 0 ${#CHROOT_ARCH[@]}); do
                            if [ ! "$($BUSYBOX chroot $NHSYSTEM_PATH/${CHROOT_ARCH[$CHROOT_COUNT]} /bin/uname -n)" ]; then
                                unset CHROOT_ARCH[$CHROOT_COUNT]
                            fi
                        done
                        echo ${CHROOT_ARCH[@]} | sed 's/ /\n/g'
                    else
                        echo ""
                    fi
                    ;;
                *)
                    f_chroot_usage
                    ;;
            esac
            ;;
        *)
            f_chroot_usage
            ;;
    esac
else
    echo "[-] No args passed to chrootmgr."
fi
